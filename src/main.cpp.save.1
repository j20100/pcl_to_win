#include <ros/ros.h>
#include <sensor_msgs/PointCloud2.h>
#include <pcl_conversions/pcl_conversions.h>
#include <pcl/point_cloud.h>
#include <pcl/point_types.h>
#include <iostream>
#include <pcl/filters/filter.h>
#include <pcl_to_windows/PCLXYZRGB.h>
#include <std_msgs/Float32MultiArray.h>


ros::Publisher pub;

void
cloud_callback (const sensor_msgs::PointCloud2ConstPtr& cloud_msg)
{
  // Container for original & filtered data

  pcl::PCLPointCloud2 pcl_pc2;

  std_msgs::Float32MultiArray array;

  // Convert to PCL data type
  pcl_conversions::toPCL(*cloud_msg, pcl_pc2);

  pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud(new pcl::PointCloud<pcl::PointXYZRGB>);
  pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud_out(new pcl::PointCloud<pcl::PointXYZRGB>);

  pcl::fromPCLPointCloud2(pcl_pc2, *cloud);

  std::vector<int> indices;

  pcl::removeNaNFromPointCloud(*cloud, *cloud_out, indices);

  pcl_to_windows::PCLXYZRGB msg;


  ROS_INFO("CREATE_MSG");

  for (size_t i = 0; i < cloud->points.size (); ++i){
    ROS_INFO("MSG_X");
    array.data[i] = cloud_out->points[i].x;
    //msg.y[i] = cloud_out->points[i].y;
    //msg.z[i] = cloud_out->points[i].z;
    //msg.r[i] = cloud_out->points[i].r;
    //msg.g[i] = cloud_out->points[i].g;
    //msg.b[i] = cloud_out->points[i].b;

  };
  ROS_INFO("DOUE");
  //pub.publish(msg);

}

int
main (int argc, char** argv)
{
  ROS_INFO("INIT");
  ros::init (argc, argv, "pcl_to_windows");
  ros::NodeHandle nh;

  // Create a ROS subscriber for the input point cloud
  ros::Subscriber sub = nh.subscribe<sensor_msgs::PointCloud2> ("input", 1, cloud_callback);

  // Create a ROS publisher for the output point cloud
  pub = nh.advertise<pcl_to_windows::PCLXYZRGB> ("pcl_xyzrgb", 1);

  // Spin
  ros::spin ();
}
